<?php

namespace humhub\modules\calendar\controllers;

use humhub\modules\calendar\helpers\dav\UserPassAuthBackend;
use humhub\modules\calendar\interfaces\CalendarService;
use humhub\modules\calendar\models\CalendarEntry;
use humhub\modules\content\models\ContentContainer;
use humhub\modules\space\models\Space;
use humhub\modules\user\models\User;
use Sabre\CalDAV\CalendarRoot;
use Sabre\DAVACL\PrincipalCollection;
use Yii;
use yii\helpers\Inflector;
use yii\helpers\Url;
use humhub\components\Controller;
use Sabre\DAV\Server;
use Sabre\DAV\Sharing\Plugin as DAVPlugin;
use Sabre\CalDAV\SharingPlugin as SharingPlugin;
use Sabre\CalDAV\Schedule\Plugin as SchedulePlugin;
use Sabre\DAV\Browser\Plugin as BrowserPlugin;
use humhub\modules\calendar\helpers\dav\CalendarBackend;
use humhub\modules\calendar\helpers\dav\PrincipalBackend;
use Sabre\DAV\Auth\Plugin as AuthPlugin;
use Sabre\DAVACL\Plugin as ACLPlugin;
use Sabre\CalDAV\Plugin as CalDAVPlugin;
use yii\web\NotFoundHttpException;

class RemoteController extends Controller
{
//    public function beforeAction($action)
//    {
//        return true;
//        return parent::beforeAction($action); // TODO: Change the autogenerated stub
//    }

    public function actionCalDav($token = null)
    {

//        file_put_contents(Yii::getAlias('@calendar/debug.txt'), 'query: ' . var_export([Yii::$app->request->bodyParams, Yii::$app->request->headers->toArray()], true) . PHP_EOL, FILE_APPEND);
//        die;

        $principalBackend = new PrincipalBackend();
        $calendarBackend = new CalendarBackend();

        $tree = [
            new PrincipalCollection($principalBackend),
            new CalendarRoot($principalBackend, $calendarBackend),
        ];

        $server = new Server($tree);

//        $server->setBaseUri(Url::to(['/calendar/remote/cal-dav', 'token' => $token]));
        $server->setBaseUri(Url::to(['/calendar/remote/cal-dav']));

        $server->addPlugin(new AuthPlugin(new UserPassAuthBackend()));
        $server->addPlugin(new DAVPlugin);
        $server->addPlugin(new SchedulePlugin());
        $server->addPlugin(new SharingPlugin());
        $server->addPlugin(new CalDAVPlugin());
        $aclPlugin = new ACLPlugin();
        $aclPlugin->adminPrincipals[] = 'principals/admin';
        /*$aclPlugin->setDefaultAcl([
            [
                'principal' => 'principals/admin',
                'privilege' => '{DAV:}read',
                'protected' => true,
            ],
            [
                'principal' => '{DAV:}authenticated',
                'privilege' => '{DAV:}read',
                'protected' => true,
            ],
        ]);*/
        $server->addPlugin($aclPlugin);

        if (YII_DEBUG) {
            $server->addPlugin(new BrowserPlugin());
        }
        $server->start();
        Yii::$app->response->isSent = true;
    }

    public function actionWellKnown()
    {
        return $this->redirect(['cal-dav']);
    }

    public function actionIcal($token)
    {
        $contentContainer = ContentContainer::findOne(['guid' => $token]);

        if (!$contentContainer) {
            throw new NotFoundHttpException();
        }

        // Login as owner of the content container only for this request
        Yii::$app->user->enableSession = false;
        Yii::$app->user->login(User::findOne(['id' => $contentContainer->owner_user_id]));

        /** @var CalendarService $calendarService */
        $calendarService = Yii::$app->moduleManager->getModule('calendar')->get(CalendarService::class);

        $events = $calendarService->getCalendarItems(null, null, [], $contentContainer->polymorphicRelation);
        $ics = CalendarEntry::generateIcal($events);

        return Yii::$app->response->sendContentAsFile(
            $ics,
            Inflector::slug($contentContainer->polymorphicRelation->displayName, '_') . '.ics',
            ['mimeType' => 'text/calendar']
        );
    }
}
